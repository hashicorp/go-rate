
name: benchstat

on:
  - pull_request

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  benchstat:
    runs-on: ubuntu-latest
    steps:
      - name: Determine Go version
        id: get-go-version
        run: |
          echo "Building with Go $(cat .go-version)"
          echo "go-version=$(cat .go-version)" >> "$GITHUB_OUTPUT"
      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: "${{ steps.get-go-version.outputs.go-version }}"
      - name: Checkout out code
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: '0'
      - name: Determine go cache key
        id: go-cache-key
        run: |
            echo "key=${{ runner.os }}-go-${{ hashFiles('**/go.sum', './Makefile') }}" >> "$GITHUB_OUTPUT"
            echo "restore-key=${{ runner.os }}-go" >> "$GITHUB_OUTPUT"
      - name: Determine Go cache paths
        id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> "$GITHUB_OUTPUT"
          echo "go-mod=$(go env GOMODCACHE)" >> "$GITHUB_OUTPUT"
          echo "go-bin=$(go env GOPATH)/bin" >> "$GITHUB_OUTPUT"
      - name: Cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-mod }}
            ${{ steps.go-cache-paths.outputs.go-bin }}
            ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ steps.go-cache-key.outputs.key }}
          restore-keys: |
            ${{ steps.go-cache-key.outputs.restore-key }}
      - name: Install tools
        run: |
          go mod download
          make tools
      - name: Bench New
        run: |
          # Run benchmarks without running any tests
          go test -timeout=120m -bench=. -count=6 -run=^# | tee new.txt
      - name: Bench Old
        run: |
          git checkout "${GITHUB_BASE_REF}"
          go mod download
          # Run benchmarks without running any tests
          go test -timeout=120m -bench=. -count=6 -run=^# | tee old.txt
          git checkout "${GITHUB_HEAD_REF}"
      - name: Benchstat
        run: |
          benchstat old.txt new.txt | tee benchstat.txt
      - name: Post benchstat
        run: |
          gh_comment_prefix='Benchstat'
          gh_user_login='github-actions[bot]'
          echo 'Hiding previous PR comments'
          ./.github/scripts/hide-comments.sh \
            "$GITHUB_API_URL" \
            "$GITHUB_GRAPHQL_URL" \
            "${{ secrets.GITHUB_TOKEN }}" \
            "$GITHUB_REPOSITORY" \
            "${{ github.event.pull_request.number }}" \
            "$gh_comment_prefix" \
            "$gh_user_login"

          echo 'Generate github comment'
          cat << EOF > github-comment.txt
          ${gh_comment_prefix} - old: \`${GITHUB_BASE_REF}\` new: \`${GITHUB_HEAD_REF}\` @ ${{ github.event.pull_request.head.sha }}

          \`\`\`
          $(cat benchstat.txt)
          \`\`\`
          EOF

          # Parse it through jq to build a valid json object.
          jq --null-input \
            --arg comment "$(cat github-comment.txt)" \
            '{"body": $comment}' > body.json

          # Post comment on PR.
          echo "Posting new comment under PR #${{ github.event.pull_request.number }}"
          curl -sX POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -d @body.json \
            "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/issues/${{ github.event.pull_request.number }}/comments"
